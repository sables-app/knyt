import { createHash } from "node:crypto";
import path from "node:path";

import { findRelevantPackageName } from "./findRelevantPackageName.ts";
import { getPackageJson } from "./getPackageJson.ts";

/**
 * Returns a unique temporary directory path based on a salt and the relevant package name.
 * The path is generated by hashing the relative temp directory, package name, and salt.
 * This ensures uniqueness and avoids collisions.
 * The resulting directory is located under the system's temp directory,
 * with the hash truncated to 8 characters for brevity.
 */
export async function getTempDir(salt: string): Promise<string> {
  const relevantPackageName = (await findRelevantPackageName()) ?? "";
  const packageJson = await getPackageJson();
  const hash = createHash("sha256")
    .update(packageJson.name)
    .update(packageJson.version)
    .update(relevantPackageName)
    .update(salt)
    .digest("hex")
    .slice(0, 8);

  // Bun's static server doesn't handle bundling from a temp directory well,
  // or any directory outside the project root, for that matter.
  // So we use a directory inside the current working directory
  // instead of the system's temp directory.
  //
  // TODO: When Bun supports bundling from directories outside the project root,
  // provide an option to switch to using the system's temp directory.
  //
  // Personally, I think it's better to have a temp directory inside the project
  // root anyway, so that it's easier to find and clean up, but there should
  // at least be an option for users who prefer the system temp directory.
  //
  // For reference, Cloudflare's Wrangler CLI uses a temp directory inside
  // the project root for building workers locally (`.wrangler`). Some projects put
  // temp files inside `node_modules/.temp`, but `node_modules` location
  // can vary based on the package manager and its configuration (i.e. workspaces),
  // so it's less reliable. In general, it's best to avoid relying on `node_modules`
  // for anything.
  //
  //    const tempDirBase = path.resolve(os.tmpdir(), "knyt/glazier");
  const tempDirBase = path.resolve(process.cwd(), ".knyt/glazier");

  return path.resolve(tempDirBase, hash);
}
